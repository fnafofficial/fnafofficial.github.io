class ContactManager{constructor(){this.form=document.getElementById("contactForm"),this.isSubmitting=!1,this.init()}init(){this.form&&(this.setupFormValidation(),this.setupFormSubmission(),this.setupFormReset())}setupFormValidation(){this.form.querySelectorAll("input, select, textarea").forEach(e=>{e.addEventListener("blur",()=>this.validateField(e)),e.addEventListener("input",()=>this.clearFieldError(e))})}setupFormSubmission(){this.form.addEventListener("submit",e=>{e.preventDefault(),this.handleFormSubmission()})}setupFormReset(){const e=document.querySelector(".reset-btn");e&&e.addEventListener("click",()=>this.resetForm())}validateField(e){const t=e.value.trim(),s=e.name,r=e.type;let o=!0,i="";if(e.hasAttribute("required")&&!t&&(o=!1,i=`${this.getFieldLabel(e)} is required.`),"email"===r&&t){/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t)||(o=!1,i="Please enter a valid email address.")}return"name"===s&&t&&t.length<2&&(o=!1,i="Name must be at least 2 characters long."),"message"===s&&t&&t.length<10&&(o=!1,i="Message must be at least 10 characters long."),this.updateFieldStatus(e,o,i),o}clearFieldError(e){const t=e.closest(".form-group");if(t){t.classList.remove("error");const e=t.querySelector(".error-message");e&&e.remove()}}updateFieldStatus(e,t,s){const r=e.closest(".form-group");r&&(r.classList.remove("error","success"),t?e.value.trim()&&r.classList.add("success"):(r.classList.add("error"),this.showFieldError(r,s)))}showFieldError(e,t){const s=e.querySelector(".error-message");s&&s.remove();const r=document.createElement("div");r.className="error-message",r.textContent=t,e.appendChild(r)}getFieldLabel(e){const t=document.querySelector(`label[for="${e.id}"]`);return t?t.textContent.replace("*","").trim():e.name}validateForm(){const e=this.form.querySelectorAll("input[required], select[required], textarea[required]");let t=!0;return e.forEach(e=>{this.validateField(e)||(t=!1)}),t}async handleFormSubmission(){if(!this.isSubmitting)if(this.validateForm()){this.isSubmitting=!0,this.setFormLoading(!0);try{const e=this.getFormData();await this.submitForm(e),this.showFormMessage("Thank you! Your message has been sent successfully.","success"),this.resetForm(),this.trackFormSubmission(e)}catch(e){console.error("Form submission error:",e),this.showFormMessage("Sorry, there was an error sending your message. Please try again.","error")}finally{this.isSubmitting=!1,this.setFormLoading(!1)}}else this.showFormMessage("Please correct the errors above.","error")}getFormData(){const e=new FormData(this.form),t={};for(let[s,r]of e.entries())t[s]=r;return t}async submitForm(e){if(await new Promise(e=>setTimeout(e,2e3)),console.log("Form submitted with data:",e),Math.random()>.1)return{success:!0};throw new Error("Simulated network error")}setFormLoading(e){const t=this.form.querySelector(".submit-btn");e?(t.disabled=!0,t.textContent="Sending...",this.form.classList.add("form-loading")):(t.disabled=!1,t.textContent="Send Message",this.form.classList.remove("form-loading"))}showFormMessage(e,t){this.form.querySelectorAll(".form-message").forEach(e=>e.remove());const s=document.createElement("div");s.className=`form-message ${t}`,s.textContent=e,this.form.insertBefore(s,this.form.firstChild),"success"===t&&setTimeout(()=>{s.remove()},5e3)}resetForm(){this.form.reset();this.form.querySelectorAll(".form-group").forEach(e=>{e.classList.remove("error","success");const t=e.querySelector(".error-message");t&&t.remove()});this.form.querySelectorAll(".form-message").forEach(e=>e.remove())}trackFormSubmission(e){"undefined"!=typeof gtag&&gtag("event","form_submission",{form_name:"contact_form",subject:e.subject,has_newsletter:"on"===e.newsletter}),console.log("Form submission tracked:",e)}handleNewsletterSubscription(e){console.log("Newsletter subscription:",e),"undefined"!=typeof gtag&&gtag("event","newsletter_signup",{email:e})}}document.addEventListener("DOMContentLoaded",function(){window.contactManager=new ContactManager}),"undefined"!=typeof module&&module.exports&&(module.exports=ContactManager);